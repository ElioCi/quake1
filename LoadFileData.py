import streamlit as st
import pandas as pd
import io

# Routine per caricare file dati unico e separare le due sezioni "General Data" e
# "Piping Data" generando i rispettivi CSV sotto files.
def loadData():

    # Funzione per verificare se il file è stato generato da "HeatLoss4"
    def verifica_file(df):

        if 'DatiCaricati' not in st.session_state:
            st.session_state.DatiCaricati = False
            
        # Trova la colonna che contiene "HeatLoss4"
        colonna_nomeApp = [col for col in df.columns if "SismaNTC1" in col]
        
        if len(colonna_nomeApp) == 0:
            # Se non trova la colonna, significa che il file non è stato generato correttamente
            st.warning("File not generated by SismaNTC1.")
            return None
        else:
            # Estrarre la data e l'ora dalla colonna
            colonna_info = colonna_nomeApp[0]
            st.success(f"File correctly generated by SismaNTC1.")
            
            # Estrai la data e l'ora dal nome della colonna
            data_ora = colonna_info.split(' - ')[1]
            st.write(f"Creation Date & Time: {data_ora}")
            return data_ora

    # Funzione per separare i dati in base alla colonna che contiene "HeatLoss4"
    def separa_dati(df):
        # Trova l'indice della colonna che contiene "HeatLoss4"
        colonne_nomeApp = [col for col in df.columns if "SismaNTC1" in col]
        colonne_datiGenerali = [col for col in df.columns if "Dati_Generali" in col]
        colonne_datiSpettri = [col for col in df.columns if "Dati_Spettri" in col]
        colonne_datiStatiLimite = [col for col in df.columns if "Dati_Stati_Limite" in col]
        colonne_puntoScelto = [col for col in df.columns if "Punto_Scelto" in col]
        colonne_rispostalocale = [col for col in df.columns if "Risposta_Locale" in col]
        
        if len(colonne_nomeApp) == 0:
            st.error("No reference to SismaNTC1 app has been found.")
            return None, None
        
        colonna_nomeApp_idx = colonne_nomeApp[0]  # Nome della colonna "SisimaNTC1"
        idx = df.columns.get_loc(colonna_nomeApp_idx)  # Ottieni l'indice numerico della colonna

        col_datiGenerali_idx = colonne_datiGenerali[0]
        idxDG = df.columns.get_loc(col_datiGenerali_idx)  # Ottieni l'indice numerico della colonna DG

        col_datiSpettri_idx = colonne_datiSpettri[0]
        idxDS = df.columns.get_loc(col_datiSpettri_idx)  # Ottieni l'indice numerico della colonna DS

        col_datiStatiLimite_idx = colonne_datiStatiLimite[0]
        idxSL = df.columns.get_loc(col_datiStatiLimite_idx)  # Ottieni l'indice numerico della colonna SL

        col_puntoScelto_idx = colonne_puntoScelto[0]
        idxPS = df.columns.get_loc(col_puntoScelto_idx)  # Ottieni l'indice numerico della colonna PS

        col_rispostalocale_idx = colonne_rispostalocale[0]
        idxRL = df.columns.get_loc(col_rispostalocale_idx)  # Ottieni l'indice numerico della colonna RL


        # Separa i due set di dati
        dati_coordinate = df.iloc[:, 1:idxDG].dropna(how='all')  # Dati tra col 2 e la col DG
        dati_generali = df.iloc[:, idxDG+1:idxDS].dropna(how='all')  # Dati tra la col DG e la col DS
        dati_spettri = df.iloc[:, idxDS+1:idxSL].dropna(how='all')  # Dati tra la col DS e la col SL
        dati_statilimite = df.iloc[:, idxSL+1:idxPS].dropna(how='all')  # Dati tra la col SL e la col PS
        dati_puntoscelto = df.iloc[:, idxPS+1:idxRL].dropna(how='all')  # Dati tra la col PS e la col RL
        dati_rispostalocale = df.iloc[:, idxRL+1:].dropna(how='all')  # Dati tra la col RL e la col finale

        
        return dati_coordinate, dati_generali, dati_spettri, dati_statilimite, dati_puntoscelto, dati_rispostalocale

    # Carica il file unito tramite uploader
    uploaded_file = st.file_uploader("Select a valid SismaNTC1 data file", type="csv")

    if uploaded_file is not None:
        # Leggi il file caricato in un DataFrame
        df_unito = pd.read_csv(uploaded_file)
        
        # Verifica se il file è stato generato da HeatLoss4
    
        data_ora = verifica_file(df_unito)
    
        if data_ora:
            # Mostra un'anteprima del file solo se la verifica è andata a buon fine
            st.write("Single File:")
            st.dataframe(df_unito)

            # Separa i dati
            dati_coordinate, dati_generali, dati_spettri, dati_statilimite, dati_puntoscelto, dati_rispostalocale = separa_dati(df_unito)
            
            if dati_coordinate is not None and dati_generali is not None and dati_spettri is not None and dati_statilimite is not None and dati_puntoscelto is not None and dati_rispostalocale is not None:
                st.session_state.DatiCaricati = True
                dati_coordinate_vis = dati_coordinate.loc[:, ~dati_coordinate.columns.str.contains('^Unnamed')]
                dati_generali_vis = dati_generali.loc[:, ~dati_generali.columns.str.contains('^Unnamed')]
                dati_spettri_vis = dati_spettri.loc[:, ~dati_spettri.columns.str.contains('^Unnamed')]
                dati_statilimite_vis = dati_statilimite.loc[:, ~dati_statilimite.columns.str.contains('^Unnamed')]
                
                dati_puntoscelto = dati_puntoscelto.rename(columns={"ag.1": "ag", "F0.1": "F0", "Tc.1": "Tc"})
                dati_puntoscelto_vis = dati_puntoscelto.loc[:, ~dati_puntoscelto.columns.str.contains('^Unnamed')]
                
                dati_rispostalocale_vis = dati_rispostalocale.loc[:, ~dati_rispostalocale.columns.str.contains('^Unnamed')]

                # Mostra un'anteprima dei dati separati

                st.write("Dati generali:")
                st.dataframe(dati_generali_vis)

                st.write("Coordinate:")
                st.dataframe(dati_coordinate_vis)
                
                st.write("Dati spettri:")
                st.dataframe(dati_spettri_vis)

                st.write("Dati stati limite:")
                st.dataframe(dati_statilimite_vis)

                st.write("Dati punto selezionato:")
                
                st.dataframe(dati_puntoscelto_vis)

                st.write("Dati risposta locale:")
                st.dataframe(dati_rispostalocale_vis)
                
                # Salva i file CSV localmente o su un percorso remoto
                # In questo esempio, i file vengono salvati localmente
                dati_coordinate.to_csv("files/Coordinate.csv", index=False)
                dati_generali.to_csv("files/DatiGenerali.csv", index=False)
                dati_spettri.to_csv("files/DatiSpettri.csv", index=False)
                dati_statilimite.to_csv("files/DatiStatiLimite.csv", index=False)
                dati_puntoscelto.to_csv("files/punto_scelto.csv", index=False)
                dati_rispostalocale.to_csv("files/RispostaLocale.csv", index=False)

                st.success("Dati caricati con successo!")


